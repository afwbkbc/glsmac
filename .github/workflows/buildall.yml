name: GLSMAC autobuild

on: [ push, pull_request ]

jobs:
  prepare:
    outputs:
      ver: ${{ steps.info.outputs.ver }}
      sha: ${{ steps.info.outputs.sha }}
    runs-on: ubuntu-latest
    steps:
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
        with:
          length: 7
      - name: info
        id: info
        env:
          ver: v0.3
          sha: ${{ steps.short-sha.outputs.sha }}
        run: |
          echo ${{ env.ver }} ${{ env.sha }}
          echo "ver=${{ env.ver }}" >> $GITHUB_OUTPUT
          echo "sha=${{ env.sha }}" >> $GITHUB_OUTPUT
  scanbuild_ubuntu:
    runs-on: ubuntu-latest
    outputs:
      bugs_found: ${{ steps.pack.bugs_found }}
    steps:
      - uses: actions/checkout@v3
      - name: install_dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq libfreetype-dev libsdl2-dev libsdl2-image-dev libglu-dev libglew-dev libossp-uuid-dev libyaml-cpp-dev clang-tools-19 clang++-19
      - name: cmake
        run: |
          mkdir scanbuild
          cd scanbuild
          scan-build-19 cmake ..
      - name: make
        working-directory: ./scanbuild
        run: scan-build-19 -o scanbuild-report make -j6 | tee scanbuild-output.txt
      - id: pack
        working-directory: ./scanbuild
        run: |
          BUGS_FOUND=$(grep -oP 'scan-build: \K(\w+)(?= bugs found)' scanbuild-output.txt)
          mkdir -p scanbuild-report
          cp scanbuild-output.txt scanbuild-report
          zip -ur scanbuild-report-$BUGS_FOUND-bugs.zip scanbuild-report
          echo "bugs_found=$BUGS_FOUND" >> $GITHUB_OUTPUT
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: scanbuild-report
          path: scanbuild/scanbuild-report-${{ steps.pack.outputs.bugs_found }}-bugs.zip
          compression-level: 0
  prerelease:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [ prepare, scanbuild_ubuntu, build_ubuntu, build_windows ]
    steps:
      - uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: development
          delete_release: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v4
      - name: release
        uses: "ncipollo/release-action@v1"
        with:
          artifacts: "scanbuild-report/*,glsmac-ubuntu64/*,glsmac-win64/*"
          tag: "development"
          name: "${{ needs.prepare.outputs.ver }}-${{ needs.prepare.outputs.sha }}-dev"
          title: "development version"
          prerelease: true
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stable'
    needs: [ prepare, scanbuild_ubuntu, build_ubuntu, build_windows ]
    steps:
      - uses: actions/download-artifact@v4
      - name: release
        uses: "ncipollo/release-action@v1"
        with:
          makeLatest: true
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          artifacts: "scanbuild-report/*,glsmac-ubuntu64/*,glsmac-win64/*"
          tag: "${{ needs.prepare.outputs.ver }}-${{ needs.prepare.outputs.sha }}"
          name: "${{ needs.prepare.outputs.ver }}-${{ needs.prepare.outputs.sha }}"
          title: "stable version"
          commit: stable
      - uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 4
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_ubuntu:
    needs: [ prepare ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stable' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: install_dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq libfreetype-dev libsdl2-dev libsdl2-image-dev libglu-dev libglew-dev libossp-uuid-dev libyaml-cpp-dev
      - name: prepare
        run: |
          mkdir build
      - name: cmake
        working-directory: ./build
        run: cmake -DCMAKE_BUILD_TYPE=Portable64 ..
      - name: make
        working-directory: ./build
        run: make -j6
      - name: data
        working-directory: ./build
        run: mv ../GLSMAC_data bin/
      - name: pack
        env:
          ARCHIVE_NAME: glsmac-ubuntu64-${{ needs.prepare.outputs.ver }}-${{ needs.prepare.outputs.sha }}.tar.gz
        run: |
          mkdir glsmac
          cp -r build/bin/GLSMAC build/bin/GLSMAC_data glsmac
          tar -zcvf $ARCHIVE_NAME glsmac
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: glsmac-ubuntu64
          path: glsmac-ubuntu64-${{ needs.prepare.outputs.ver }}-${{ needs.prepare.outputs.sha }}.tar.gz
          compression-level: 0
  build_windows:
    needs: [ prepare ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: install_dependencies
        run: |
          choco install ninja
      - name: prepare
        run: |
          mkdir build
      - name: cmake
        working-directory: ./build
        run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Portable64 ..
      - name: make
        working-directory: ./build
        run: ninja
      - name: data
        working-directory: ./build
        run: mv ../GLSMAC_data bin/
      - name: pack
        env:
          ARCHIVE_NAME: glsmac-win64-${{ needs.prepare.outputs.ver }}-${{ needs.prepare.outputs.sha }}.zip
        run: |
          mkdir glsmac
          Copy-Item -Path build/bin/GLSMAC.exe -Destination glsmac
          Copy-Item -Path build/bin/GLSMAC_data -Destination glsmac -Recurse
          Compress-Archive -Path glsmac -Destination $Env:ARCHIVE_NAME
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: glsmac-win64
          path: glsmac-win64-${{ needs.prepare.outputs.ver }}-${{ needs.prepare.outputs.sha }}.zip
          compression-level: 0
